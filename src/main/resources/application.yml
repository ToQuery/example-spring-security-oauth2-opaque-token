logging:
  level:
    org:
      springframework:
        security: trace


spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s
  output:
    ansi:
      enabled: always
  profiles:
    active: local
  application:
    name: example-spring-security-oauth2-opaque-token
  security:
    oauth2:
      client:
        registration:
          github:
            clientId: ${OAUTH_GITHUB_CLIENT_ID}
            clientSecret: ${OAUTH_GITHUB_CLIENT_SECRET}
            scope:
#              - openid
              - user:email
              - read:user
          toquery:
            provider: toquery
            client-name: example-spring-security-oauth2-opaque-token
            client-id: example-spring-security-oauth2-opaque-token
            client-secret: example-spring-security-oauth2-opaque-token-secret
            client-authentication-method: client_secret_basic
            authorization-grant-type: authorization_code
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            # 注意是否包含 openid ，包含则会调用 oidcUserService 方法
            # 并且和 opaquetoken 方式冲突
            scope:
              - read
              - write
              - openid
              - profile
              - email
              - address
              - phone
        provider:
          toquery:
            authorization-uri: ${app.oauth2.domain}/oauth2/authorize
            token-uri: ${app.oauth2.domain}/oauth2/token
            user-info-uri: ${app.oauth2.domain}/userinfo
            user-name-attribute: sub
            jwk-set-uri: ${app.oauth2.domain}/oauth2/jwks
      resourceserver:
        opaquetoken:
          client-id: ${spring.security.oauth2.client.registration.toquery.client-id}
          client-secret: ${spring.security.oauth2.client.registration.toquery.client-secret}
          introspection-uri: ${app.oauth2.domain}

app:
  oauth2:
    domain: http://example-spring-authorization-server.local:9000
